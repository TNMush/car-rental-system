// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?
}

model Profile {
  id                    String                  @id @unique
  user                  User                    @relation(fields: [id], references: [id])
  name                  String
  profilePicture        String?
  bio                   String?
  locationId            Int?
  location              Location?               @relation(fields: [locationId], references: [id])
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  car                   Car[]
  rental                Rental[]
  listings              Listing[]
  idVerification        IdentityVerification[]
  residenceVerification ResidenceVerification[]
  experience            Experience[]
}

model IdentityVerification {
  id               String  @id @unique @default(uuid())
  profileId        String
  profile          Profile @relation(fields: [profileId], references: [id])
  cameraImage      String
  identityDocument String
  status           Status  @default(PENDING)
}

model ResidenceVerification {
  id          String  @id @unique
  profileId   String
  profile     Profile @relation(fields: [profileId], references: [id])
  utilityBill String
  affidavity  String?
  status      Status  @default(PENDING)
}

model Car {
  owner           Profile           @relation(fields: [ownerId], references: [id])
  id              String            @id @default(uuid())
  ownerId         String
  make            String
  model           String
  type            String
  year            Int
  color           String
  regNumber       String            @unique
  frontView       String
  backView        String
  sideView        String
  interiorView1   String
  interiorView2   String?
  interiorView3   String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  carVerification CarVerification[]
}

model CarVerification {
  id                  String @id @unique
  car                 Car    @relation(fields: [id], references: [id])
  proofOfRadioLicense String
  proofOfInsurance    String
  status              Status @default(PENDING)
}

model Listing {
  id         String   @id @default(uuid())
  listed     Profile  @relation(fields: [listedBy], references: [id])
  listedBy   String
  location   Location @relation(fields: [locationId], references: [id])
  locationId Int
  from       DateTime
  upTo       DateTime
  pricing    Decimal
  rental     Rental[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Rental {
  profile          Profile     @relation(fields: [renterId], references: [id])
  id               String      @id @default(uuid())
  listingId        String      @unique
  renterId         String
  listing          Listing     @relation(fields: [listingId], references: [id])
  dateOfCollection DateTime
  dateOfReturn     DateTime
  priceCharged     Decimal
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  experience       Experience?
}

model Experience {
  id         String   @id @default(uuid())
  reviewedBy Profile  @relation(fields: [reviewerId], references: [id])
  reviewerId String
  rental     Rental   @relation(fields: [rentalId], references: [id])
  rentalId   String   @unique
  rating     Int?
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Location {
  id      Int       @id @default(autoincrement())
  city    String
  address String
  profile Profile[]
  listing Listing[]
}
